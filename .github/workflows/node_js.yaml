name: Node.js CI

on: [push]

jobs:
  compile:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        node-version: [16.x, 18.x, 20.x]
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node Modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node${{ matrix.node-version }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install locked dependencies
        run: npm ci

      - run: npm run compile

  test:
    name: Unimplemented Test
    runs-on: ubuntu-latest
    needs: [compile]
    steps:
      - run: echo "Not Yet Implemented"

  make-macos:
    needs: [test]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Cache Node Modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node16.x-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install locked dependencies
        run: npm ci

      - name: Compile Typescript
        run: npm run compile

      - name: Make application
        run: npm run make # ./out/beryl-darwin-x64/ or ./out/make/zip/darwin/x64/<zip file>

      - name: Set VERSION_USED env var to tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION_USED=$(echo ${GITHUB_REF:11})" >> $GITHUB_ENV

      - name: Set VERSION_USED env var to sha
        if: "!startsWith(github.ref, 'refs/tags/v')"
        run: echo "VERSION_USED=${{ github.sha }}" >> $GITHUB_ENV

      - name: Rename packaged zip file
        run: |
          mkdir -p ${{ github.workspace }}/macos-standalone
          mv ${{ github.workspace }}/out/make/zip/darwin/x64/*.zip ${{ github.workspace }}/macos-standalone/beryl-${{ env.VERSION_USED }}-macos-amd64-standalone.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: beryl-macos-standalone-archive
          path: ${{ github.workspace }}/macos-standalone

  package-linux:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Cache Node Modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node16.x-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install locked dependencies
        run: npm ci

      - name: Package application
        run: npm run package # ./out/beryl-linux-x64/

      - name: Set VERSION_USED env var to tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION_USED=$(echo ${GITHUB_REF:11})" >> $GITHUB_ENV

      - name: Set VERSION_USED env var to sha
        if: "!startsWith(github.ref, 'refs/tags/v')"
        run: echo "VERSION_USED=${{ github.sha }}" >> $GITHUB_ENV

      - name: Create standalone binary archive
        uses: ihiroky/archive-action@v1
        with:
          root_dir: out/
          file_path: beryl-${{ env.VERSION_USED }}-linux-amd64-standalone.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: beryl-linux-standalone-archive
          path: ${{ github.workspace }}/beryl-${{ env.VERSION_USED }}-linux-amd64-standalone.tar.gz

  package-windows:
    needs: [test]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Cache Node Modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node16.x-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install locked dependencies
        run: npm ci

      - name: Package application
        run: npm run package

      - name: Set VERSION_USED env var to tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION_USED=$(echo ${GITHUB_REF:11})" >> $GITHUB_ENV
        shell: bash

      - name: Set VERSION_USED env var to sha
        if: "!startsWith(github.ref, 'refs/tags/v')"
        run: echo "VERSION_USED=${{ github.sha }}" >> $GITHUB_ENV
        shell: bash

      - name: Zip standalone binary archive
        uses: ihiroky/archive-action@v1
        with:
          root_dir: out/beryl-win32-x64/
          file_path: beryl-${{ env.VERSION_USED }}-windows-amd64-standalone.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: beryl-windows-standalone-archive
          path: ${{ github.workspace }}/beryl-${{ env.VERSION_USED }}-windows-amd64-standalone.zip

  create-windows-installer:
    needs: [test]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      # TODO: Replace compiling with downloading result artifact from package-windows
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Cache Node Modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node16.x-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install locked dependencies
        run: npm ci

      - name: Package application
        run: npm run package

      - name: Set VERSION_USED env var to tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION_USED=$(echo ${GITHUB_REF:11})" >> $GITHUB_ENV
        shell: bash

      - name: Set VERSION_USED env var to sha
        if: "!startsWith(github.ref, 'refs/tags/v')"
        run: echo "VERSION_USED=${{ github.sha }}" >> $GITHUB_ENV
        shell: bash

      - name: Compile installer
        run: ISCC /DMyAppVersion=${env:VERSION_USED} installer.iss

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: beryl-windows-installer
          path: ${{ github.workspace }}/innoOut

  release-to-github:
    name: Release on GitHub
    runs-on: ubuntu-latest
    needs:
      [make-macos, package-linux, package-windows, create-windows-installer]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ github.workspace }}/build-artifacts

      - name: Set PREREL environment variable
        env:
          TAG: ${{ github.ref }}
        run: echo "PREREL=$(if [[ $TAG =~ "alpha" ]] || [[ $TAG =~ "beta" ]] || [[ $TAG =~ "rc" ]]; then echo "true"; else echo "false"; fi;)" >> $GITHUB_ENV

      - name: Sanitize github.ref
        run: echo "TAG_VERSION=$(echo ${GITHUB_REF:11})" >> $GITHUB_ENV
        # Normally to remove refs/tags/ I just use 10, but in this case I also
        # want to remove the first character of the tag which should be a 'v' so here the length is 11.

      - name: Create Release with Assets
        uses: softprops/action-gh-release@v1
        with:
          name: Version ${{ env.TAG_VERSION }}
          draft: true
          prerelease: ${{ env.PREREL }}
          files: ${{ github.workspace }}/build-artifacts/*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
